parameters:
  solution: 'Fortress/Fortress.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  pool: 'On-Prem Default'
  artifactName: 'Fortress'

jobs:
  - job: Build
    displayName: 'Build Job / Prepare Artifacts'
    pool:
      name: ${{parameters.pool}}
    workspace:
      clean: all
    steps:
    - checkout: self

    - task: PowerShell@2
      displayName: 'dump all env variables'
      inputs:
        targetType: 'inline'
        script: |
          $var = (gci env:*).GetEnumerator() | Sort-Object Name
          $out = ""
          Foreach ($v in $var) {$out = $out + "`t{0,-28} = {1,-28}`n" -f $v.Name, $v.Value}
          
          write-output "dump variables on $env:BUILD_ARTIFACTSTAGINGDIRECTORY\env_variables.md"
          $fileName = "$env:BUILD_ARTIFACTSTAGINGDIRECTORY\test.md"
          set-content $fileName $out
          
          write-output "##vso[task.addattachment type=Distributedtask.Core.Summary;name=Environment Variables;]$fileName"
    
    - task: PowerShell@2
      displayName: 'identify build target'
      inputs:
        targetType: 'inline'
        script: |
          if ($env:SYSTEM_PULLREQUEST_TARGETBRANCH -and ($env:BUILD_SOURCEBRANCH -inotlike '*/tags/*')) {
            $branch_string = $env:SYSTEM_PULLREQUEST_TARGETBRANCH
          }
          else {
            $branch_string = $env:BUILD_SOURCEBRANCH
          }
          switch ($branch_string) {
              {$_ -eq "refs/heads/master"} { $target_env = "dev" }
              {$_ -like "refs/tags/qa_*"} { $target_env = "qa" }
              {$_ -eq "refs/heads/release"} { $target_env = "uat" }
              {$_ -eq "refs/heads/staging"} { $target_env = "stg" }
              {$_ -like "refs/tags/dr_*"} { $target_env = "dr" }
              {$_ -like "refs/tags/staging_*"} { $target_env = "stg" }
              {$_ -like "refs/tags/production_*"} { $target_env = "prod" }
              default { $target_env = "skip" }
          }
          Write-Output "Target Environment: $target_env"
          $env:target_env = $target_env
          Write-Output "##vso[task.setvariable variable=target_env;]$target_env"
          Write-Output "##vso[task.setvariable variable=target_env;isOutput=true]$target_env"
            
    - task: NodeTool@0
      displayName: 'install Node.js'
      inputs:
        versionSpec: '>=12.13.0'
        checkLatest: true

    - task: Npm@1
      displayName: 'install Angular CLI'
      inputs:
        command: custom
        verbose: false
        customCommand: 'install -g @angular/cli'

    - task: Npm@1
      displayName: 'npm install'
      inputs:
        workingDir: '$(System.DefaultWorkingDirectory)/Fortress/fortress-clients-angular'
        verbose: false
        
    - task: Npm@1
      displayName: 'npm build'
      inputs:
        command: custom
        workingDir: '$(System.DefaultWorkingDirectory)/Fortress/fortress-clients-angular'
        verbose: false
        customCommand: 'run build:final'
    
    - task: NuGetCommand@2
      displayName: 'nuget restore'
      inputs:
        command: 'restore'
        restoreSolution: '${{parameters.solution}}'
        feedsToUse: 'select'

    - task: VSBuild@1
      inputs:
        solution: '${{parameters.solution}}'
        platform: '${{parameters.buildPlatform}}'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.binariesdirectory)\\"'
        configuration: '${{parameters.buildConfiguration}}'

    - task: ExtractFiles@1
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      displayName: 'extract compiled files webmvc'
      inputs:
        archiveFilePatterns: '$(build.binariesdirectory)\Fortress.Clients.WebMvc.zip'
        destinationFolder: '$(Build.ArtifactStagingDirectory)/Fortress.Clients.WebMvc'

    - task: ExtractFiles@1
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      displayName: 'extract compiled files webapi'
      inputs:
        archiveFilePatterns: '$(build.binariesdirectory)\Fortress.Services.WebApi.zip'
        destinationFolder: '$(Build.ArtifactStagingDirectory)/Fortress.Services.WebApi'

    - task: CopyFiles@2
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      displayName: 'publishing Fortress.WebJobs Project files'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)\Fortress\Fortress.WebJobs\bin\release'
        TargetFolder: '$(Build.ArtifactStagingDirectory)\webjobs\App_Data\jobs\continuous\Fortress-WebJobs'

    - task: PowerShell@2
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      displayName: 'publishing compiled artifacts for webmvc'
      inputs:
        targetType: filePath
        filePath: './prepare-artifacts.ps1'
        arguments: '
          -artifactDirectory ''$(Build.ArtifactStagingDirectory)'' 
          -systemWorkingDirectory ''$(System.DefaultWorkingDirectory)\Fortress'' 
          -projectFolder ''Fortress.Clients.WebMvc'' 
          -zippedArtifact ''webmvc''
          '

    - task: PowerShell@2
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      displayName: 'publishing compiled artifacts for webapi'
      inputs:
        targetType: filePath
        filePath: './prepare-artifacts.ps1'
        arguments: '
          -artifactDirectory ''$(Build.ArtifactStagingDirectory)'' 
          -systemWorkingDirectory ''$(System.DefaultWorkingDirectory)\Fortress'' 
          -projectFolder ''Fortress.Services.WebApi'' 
          -zippedArtifact ''webapi''
          '

    - task: CopyFiles@2
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      displayName: 'publishing Fortress.Data.Sql Project files'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)\Fortress\Fortress.Data.Sql'
        TargetFolder: '$(Build.ArtifactStagingDirectory)\data-sql'

    - task: UniversalPackages@0
      displayName: 'publish artifacts to DEV'
      condition: and(succeeded(), eq(variables['target_env'], 'dev'), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        command: 'publish'
        publishDirectory: '$(Build.ArtifactStagingDirectory)'
        feedsToUsePublish: 'internal'
        vstsFeedPublish: '122ba013-5692-4cf4-811e-f5f89b3c41cb/7f5688c5-8d83-499b-8c73-234aa7e9da6c'
        vstsFeedPackagePublish: 'fortress-artifacts'
        packagePublishDescription: $(target_env)-$(Build.BuildNumber)
        versionOption: 'patch'   

    - task: UniversalPackages@0
      displayName: 'publish artifacts to QA'
      condition: and(succeeded(), eq(variables['target_env'], 'qa'), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        command: 'publish'
        publishDirectory: '$(Build.ArtifactStagingDirectory)'
        feedsToUsePublish: 'internal'
        vstsFeedPublish: '122ba013-5692-4cf4-811e-f5f89b3c41cb/3686ecd8-5cf5-46ea-9805-65b2923ce9a6'
        vstsFeedPackagePublish: 'fortress-artifacts'
        packagePublishDescription: $(target_env)-$(Build.BuildNumber)
        versionOption: 'patch'
    
    - task: UniversalPackages@0
      displayName: 'publish artifacts to UAT'
      condition: and(succeeded(), eq(variables['target_env'], 'uat'), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        command: 'publish'
        publishDirectory: '$(Build.ArtifactStagingDirectory)'
        feedsToUsePublish: 'internal'
        vstsFeedPublish: '122ba013-5692-4cf4-811e-f5f89b3c41cb/f6227f25-c515-40b5-81d5-aa3fed4223b4'
        vstsFeedPackagePublish: 'fortress-artifacts'
        packagePublishDescription: $(target_env)-$(Build.BuildNumber)
        versionOption: 'patch'

    - task: UniversalPackages@0
      displayName: 'publish artifacts to STG'
      condition: and(succeeded(), eq(variables['target_env'], 'stg'), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        command: 'publish'
        publishDirectory: '$(Build.ArtifactStagingDirectory)'
        feedsToUsePublish: 'internal'
        vstsFeedPublish: '122ba013-5692-4cf4-811e-f5f89b3c41cb/e4db797b-65ef-49bd-8281-384880bc6688'
        vstsFeedPackagePublish: 'fortress-artifacts'
        packagePublishDescription: $(target_env)-$(Build.BuildNumber)
        versionOption: 'patch'

    - task: UniversalPackages@0
      displayName: 'publish artifacts to DR'
      condition: and(succeeded(), eq(variables['target_env'], 'dr'), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        command: 'publish'
        publishDirectory: '$(Build.ArtifactStagingDirectory)'
        feedsToUsePublish: 'internal'
        vstsFeedPublish: '122ba013-5692-4cf4-811e-f5f89b3c41cb/8036d785-19ac-4a2d-8686-7b44f2cd0c0e'
        vstsFeedPackagePublish: 'fortress-artifacts'
        packagePublishDescription: $(target_env)-$(Build.BuildNumber)
        versionOption: 'patch'

    - task: UniversalPackages@0
      displayName: 'publish artifacts to PROD'
      condition: and(succeeded(), eq(variables['target_env'], 'prod'), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        command: 'publish'
        publishDirectory: '$(Build.ArtifactStagingDirectory)'
        feedsToUsePublish: 'internal'
        vstsFeedPublish: '122ba013-5692-4cf4-811e-f5f89b3c41cb/792b2355-af2e-4d00-bbd3-5254060c1020'
        vstsFeedPackagePublish: 'fortress-artifacts'
        packagePublishDescription: $(target_env)-$(Build.BuildNumber)
        versionOption: 'patch'

    - task: PowerShell@2
      displayName: Capture Pipeline Variables
      condition: succeeded()
      inputs:
        targetType: inline
        script: |
          $envHash = @{}
          Get-ChildItem env: | ForEach-Object {
            $newHash = @{}
            $newHash[$_.Key] = $_.Value

            # Add the Hash 
            $envHash += $newHash
          }
          $envHash = $envHash | ConvertTo-Json
          $envHash | Out-File -FilePath $(Build.ArtifactStagingDirectory)\pipelinevars.json -Force